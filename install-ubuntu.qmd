---
title: "Install Ubuntu"
author: "Your Name"
date: today
format:
  html:
    toc: true
    code-fold: true
    theme: cosmo
    css: custom.css
bibliography: references.bib
csl: apa.csl
execute:
  echo: false
  warning: false
---

## 1. Set Up Your Quarto Project

Create a new Quarto project for your website:

```bash
quarto create-project ubuntu-setup --type website
cd ubuntu-setup
```

This initializes a Quarto website project where you can organize your content.

---

## 2. Organize the Content

Structure your website by creating separate `.qmd` files for each section:

- `index.qmd` – Introduction
- `ubuntu-install.qmd` – Installing Ubuntu
- `gpu-setup.qmd` – Setting Up the GPU
- `docker-setup.qmd` – Installing Docker
- `docker-container.qmd` – Configuring the Data Science Docker Container
- `orchestrate-languages.qmd` – Orchestrating R, Python, and Julia
- `include-tools.qmd` – Including Spark, Polars, Tidyverse, and Tidymodels
- `conclusion.qmd` – Conclusion

---

## 3. Write the Content for Each Section

### **index.qmd**

```markdown
---
title: "Ubuntu Data Science Environment Setup"
format: html
---

# Introduction

Welcome to this comprehensive guide on setting up a powerful data science environment. We'll cover installing Ubuntu, configuring your GPU, and setting up a Docker container that orchestrates R, Python, and Julia with tools like Spark, Polars, Tidyverse, and Tidymodels.
```

### **ubuntu-install.qmd**

```markdown
# Installing Ubuntu

## System Requirements

- **Processor:** Dual-core 2 GHz or higher
- **Memory:** 4 GB RAM (8 GB recommended)
- **Storage:** 25 GB free space
- **GPU:** NVIDIA GPU for acceleration (optional)

## Installation Steps

1. **Download Ubuntu:**
   - Obtain the latest LTS version from the [Ubuntu downloads page](https://ubuntu.com/download).

2. **Create a Bootable USB:**
   - Use tools like Rufus (Windows) or Etcher (Mac/Linux) to create a bootable USB drive.

3. **Install Ubuntu:**
   - Boot from the USB drive and follow the on-screen installation instructions.
```

### **gpu-setup.qmd**

```markdown
# Setting Up the GPU

## Install NVIDIA Drivers

1. **Add Graphics Drivers PPA:**

   ```bash
   sudo add-apt-repository ppa:graphics-drivers/ppa
   sudo apt update
   ```

2. **Install Recommended Drivers:**

   ```bash
   ubuntu-drivers devices
   sudo apt install nvidia-driver-470  # Replace with the recommended driver version
   ```

## Verify Installation

```bash
nvidia-smi
```

You should see your GPU details displayed.
```

### **docker-setup.qmd**

```markdown
# Installing Docker

## Install Docker Engine

1. **Update Packages:**

   ```bash
   sudo apt update
   ```

2. **Install Docker:**

   ```bash
   sudo apt install docker.io
   ```

3. **Start and Enable Docker:**

   ```bash
   sudo systemctl start docker
   sudo systemctl enable docker
   ```

4. **Add User to Docker Group:**

   ```bash
   sudo usermod -aG docker $USER
   ```

   Log out and log back in for the changes to take effect.

## Verify Docker Installation

```bash
docker run hello-world
```

You should see a confirmation message from Docker.
```

### **docker-container.qmd**

```markdown
# Configuring the Data Science Docker Container

## Create a Dockerfile

In your project directory, create a `Dockerfile` with the following content:

```docker
# Use the latest Ubuntu LTS image
FROM ubuntu:22.04

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 python3-pip \
    r-base \
    julia \
    default-jdk \
    wget unzip \
    libssl-dev libffi-dev \
    git curl

# Install Spark
ENV SPARK_VERSION=3.3.0
RUN wget https://archive.apache.org/dist/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop3.tgz && \
    tar xvf spark-${SPARK_VERSION}-bin-hadoop3.tgz && \
    mv spark-${SPARK_VERSION}-bin-hadoop3 /opt/spark && \
    rm spark-${SPARK_VERSION}-bin-hadoop3.tgz
ENV SPARK_HOME=/opt/spark
ENV PATH=$PATH:$SPARK_HOME/bin

# Install Python packages
RUN pip3 install --no-cache-dir \
    jupyterlab \
    pyspark \
    polars

# Install R packages
RUN R -e "install.packages(c('tidyverse', 'tidymodels', 'sparklyr'), repos='https://cloud.r-project.org/')"

# Install Julia packages
RUN julia -e "using Pkg; Pkg.add.(['IJulia', 'Polars']); using IJulia"

# Expose JupyterLab port
EXPOSE 8888

# Start JupyterLab
CMD ["jupyter", "lab", "--ip=0.0.0.0", "--allow-root"]
```

## Build the Docker Image

```bash
docker build -t data-science-env .
```

## Run the Docker Container

```bash
docker run -p 8888:8888 data-science-env
```

Access JupyterLab at `http://localhost:8888`.
```

### **orchestrate-languages.qmd**

```markdown
# Orchestrating R, Python, and Julia

With JupyterLab installed, you can use R, Python, and Julia notebooks.

## Ensure Jupyter Kernels are Installed

### Python Kernel

Already available by default.

### R Kernel

Included via the `IRkernel` package.

```bash
R -e "install.packages('IRkernel', repos='https://cloud.r-project.org/'); IRkernel::installspec(user = FALSE)"
```

### Julia Kernel

Already added in the Dockerfile with `IJulia`.

## Verify in JupyterLab

Start JupyterLab and ensure that you can create notebooks with all three languages.
```

### **include-tools.qmd**

```markdown
# Including Spark, Polars, Tidyverse, and Tidymodels

## Apache Spark

### PySpark (Python)

PySpark is installed via pip.

```python
import pyspark
```

### Sparklyr (R)

```R
library(sparklyr)
sc <- spark_connect(master = "local")
```

## Polars

### Python

Already installed via pip.

```python
import polars as pl
```

### Julia

Polars is installed via Julia's package manager.

```julia
using Polars
```

## Tidyverse and Tidymodels (R)

Already installed.

```R
library(tidyverse)
library(tidymodels)
```
```

### **conclusion.qmd**

```markdown
# Conclusion

Congratulations! You've set up an integrated data science environment on Ubuntu, leveraging the power of R, Python, and Julia, along with tools like Spark and Polars.

## Next Steps

- Explore data analysis with these tools.
- Customize the Docker image with additional packages as needed.
- Share your environment with others for collaborative work.
```

---

## 4. Render the Website

Render your Quarto website with:

```bash
quarto render
```

---

## 5. Preview the Website

To preview your site locally:

```bash
quarto preview
```

Open the provided URL in your web browser to see your website.

---

## 6. Deploy Your Website

You can deploy your Quarto website to platforms like GitHub Pages or Netlify for public access.

---

By following these steps, you'll have a well-organized Quarto document that serves as a comprehensive guide for setting up Ubuntu with a GPU and a data science Docker container orchestrating R, Python, and Julia, including Spark, Polars, Tidyverse, and Tidymodels.

Feel free to customize each section further to fit your specific needs or preferences.